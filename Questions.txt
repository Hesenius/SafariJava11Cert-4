Q)
Which are legal:
A) { int x; }
   { int x; }
B) class X {
     { sout(x); }
     int x;
   }
C) {
     int x;
     { int x; }
   }
D) {
     int x;
     Predicate<String> ps = x -> true;
   }
E) for (int x = 0; x < 10; x++)
     ;
   int x;

Q)
Which are legal:
A) class X {
  var x = 99;
}

B) void doStuff(var x) { }

C) void doStuff() {
  var x;
  x = 100;
}

D) void doStuff() {
  var x = 100;
}

E) void doStuff() {
  var x = { 1, 2, 3 };
}

Q) Which are legal
A)
   for (var x = 0; x < 3; x++)
     System.out.println(x);
B)
   try (var in = new FileReader("");
        var out = new FileWriter("")) {
   }
C)
   var var = "var";

D)
void doStuff() {
  var x = new int[]{ 1, 2, 3 };
}

E)
var x = 99, y = 100;

Q) Which print "true"
A) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s == t);
B) String s = "Hello";
   String t = "He";
   t += "llo";
   sout(s.equals(t));
C) StringBuilder s = new StringBuilder("Hello");
   StringBuilder t = new StringBuilder("He");
   t.append("llo");
   sout(s.equals(t));
D) List<String> ls = List.of("Fred", "Jim");
   List<String> ls2 = new ArrayList<>(ls);
   sout(ls.equals(ls2));
E) LocalDate ld = LocalDate.of(2021, 3, 29);
   LocalDate ld2 = LocalDate.of(2021, 3, 29);
   sout(ld.equals(ld2));

Q) in another jarfile:
class X {
    static String h = "Hello";
}

Which are true?
    String s1 = "Hello";
    String s2 = new StringBuilder("Hello").toString();
    String s3 = s2.intern();

A) s1 == s2
B) s2 == s3
C) s1 == s3
D) X.h == s1
E) None of the above

Q) Which are valid?
 A) int x = 99; while (x) {}
 B) int x = 99; switch (x) {}
 C) enum Day { MONDAY; }
   ...
 Day x = Day.MONDAY;
 switch (x) {
   case MONDAY:
 }
 D) enum Day { MONDAY; }
 ...
 Day x = Day.MONDAY;
 switch (x) {
   case Day.MONDAY:
 }
 E) long count = 99;
 switch (count) {}

Q) Given
  void doStuff() throws IOException {};
  void doStuff2() throws FileNotFoundException {};
And:
  void tryStuff() {
    try {
      doStuff();
      doStuff2();
    } enter code here {
      // handle both exceptions
    }
  }
What can be inserted at "enter code here" to provide handling of exceptions from both methods?
A) catch (IOException | FileNotFoundException e)
B) catch (FileNotFoundException | IOException e)
C) catch (FileNotFoundException e)
D) catch (IOException e)
E) finally

Q) Given
  class AC implements AutoCloseable {
    private String name;
    public AC(String name) { this.name = name; }
    @Override public void close() { System.out.print("Closing " + name); }
  }

  public static void main(String[] args) {
      var ac0 = new AC("zero");
      try (var ac1 = new AC("one");
          var ac2 = new AC("two");
          ac0;){}
    }
What is the result?
A) Compilation fails
B) Closing zeroClosing twoClosing one
C) Closing zeroClosing oneClosing two
D) Closing twoClosing oneClosing zero
E) Closing oneClosing twoClosing zero

Q) Given:
void doStuff(int x, int y) {}         // Method A
void doStuff(int x, long y) {}        // Method B
void doStuff(long x, int y) {}        // Method C
void doStuff(int ... x) {}            // Method D
void doStuff(Integer x, Integer y) {} // Method E

Given all five methods exist, which is invoked by this invocation?

       doStuff(1, 2);

Q) Given:
void doStuff(int x, long y) {}        // Method B
void doStuff(long x, int y) {}        // Method C
void doStuff(int ... x) {}            // Method D
void doStuff(Integer x, Integer y) {} // Method E

What is the result of this invocation?

       doStuff(1, 2);

A) Compilation fails

Q) Given:
void doStuff(int ... x) {}            // Method D
void doStuff(Integer x, Integer y) {} // Method E

What is the result of this invocation?

       doStuff(1, 2);

A) Compilation fails
B) runtime exception
C) none :)

Q) Given:
interface Int1 {
 default void doStuff() {
   System.out.println("Int1.doStuff()");
 }
}
class Cl1 implements Int1 {
 void doStuff() {
   System.out.println("Cl1.doStuff");
 }
}
What is the result of a call:
new Cl1().doStuff();

A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl1.doStuff()
E) Int1.doStuff()
   Cl1.doStuff()

Q) Given:
interface Int1 {
 default void doStuff() { System.out.println("Int1.doStuff()"); }
}
class Cl2 implements Int1 {
 public void doStuff() { System.out.println("Cl2.doStuff"); }
}
What is the result of a call:
public class Q2 {
 public static void main(String[] args) { new Cl2().doStuff(); }
}
A) Compilation fails
B) RuntimeException
C) Int1.doStuff()
D) Cl2.doStuff()
E) Int1.doStuff()
   Cl2.doStuff()

Q) Given:
interface IntA {
 default void doStuff() {  System.out.println("IntA.doStuff()"); }
}
interface IntB {
 default void doStuff() { System.out.println("IntB.doStuff()"); }
}
class ClA implements IntA, IntB {
 public void doStuff() { System.out.println("ClA.doStuff"); }
}
What is the result of a call:
public class Q3 {
 public static void main(String[] args) { new ClA().doStuff(); }
}
A) Compilation fails
B) RuntimeException
C) IntA.doStuff()
D) IntB.doStuff()
E) ClA.doStuff()

Q) Given:
interface IntA {
 default void doStuff() {  System.out.println("IntA.doStuff()"); }
}
interface IntB {
 default void doStuff() { System.out.println("IntB.doStuff()"); }
}
class ClA implements IntA, IntB {
}
What is the result of a call:
public class Q3 {
 public static void main(String[] args) { new ClA().doStuff(); }
}
A) Compilation fails
B) RuntimeException
C) IntA.doStuff()
D) IntB.doStuff()
E) IntA.doStuff()
   IntB.doStuff()

Q) Given:
interface IntA {
 default void doStuff() {  System.out.println("IntA.doStuff()"); }
}
interface IntB {
 default void doStuff() { System.out.println("IntB.doStuff()"); }
}
class ClA implements IntA, IntB {
 public void doStuff() { /* point a */ }
}
and a call: new ClA().doStuff();
What should be added at point a to cause the output "IntB.doStuff()"?
A) Nothing more is needed
B) This cannot be achieved
C) super.doStuff()
D) IntB.doStuff()
E) IntB.super.doStuff()

Q)
public class AnonymousQ1 {
  public void doStuff() {
   int len = 3;
   Predicate<String> ps = new Predicate<String>() {
     @Override
     public boolean test(String s) {
       return s.length() > len; // line n1
     }
   };
   // line n2
 }
}
Which are true?
A) The code compiles
B) Compilation fails due to a problem at line n1
C) adding the code
     System.out.println("testing lines " + (++len));
   at line n2 is OK

Q)
class Outer {
 class Inner{
 }
}
Which create an instance of Inner?
A) new Inner();
B) new Outer.Inner();
C) Outer ou = new Outer(); new ou.Inner();
D) new Outer().new Inner();
E) new Outer() { new Inner(); }

Q) Which is true?
A) A static method cannot access an instance field
B) An instance method cannot access a static field
C) Instance methods can access both instance and static fields
D) Static methods can access both instance and static fields

Q) Given:
 class Base {
   void doBaseStuff() {
     System.out.println("doBaseStuff");
   }
 }
 class Sub extends Base {
   void doBaseStuff() { System.out.println("doSubStuff"); }
   void doOtherStuff() { System.out.println("doOtherStuff"); }
 }
 In the Base and Sub classes, which are true in isolation?
 A) doBaseStuff in Base can be marked public without causing errors
 B) doBaseStuff in Base can be marked private without causing errors
 C) doBaseStuff in Sub can be marked public without causing errors
 D) doBaseStuff in Sub can be marked protected without causing errors
 E) doBaseStuff in Sub can be marked private without causing errors

Q) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }
  class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
  }

In the Base and Sub classes, which are true in isolation?
A) doBaseStuff in Base can be marked throws Exception without causing errors
B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
C) doBaseStuff in Sub can be marked throws Exception without causing errors
D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
E) if doBaseStuff in Base were marked throws Exception,
   then doBaseStuff in Sub can be marked throws IOException without causing errors

Q) Given:
  class Q24Base {
    public int get() {
      return 0;
    }
  }

and:
  class Q24Sub extends Q24Base {}

Which methods may individually be added to this class?
A) public long get() { return 1; }
B) public short get() { return 1; }
C) public Q24Base get() { return null; }
D) None of these

Q) Given:
  public CharSequence getValue() {
    return "";
  }

  Which of these methods may individually be added to a subclass of this class?
  A) public int getValue(int x) {return 1;}
  B) public CharSequence getValue() {return "Hello";}
  C) public String getValue() {return "Hello";}
  D) public String getValue(int x) {return "Hello";}
  E) None of these

Q) Given:
 class Q25Base {
   int x = 99;
   { System.out.println("x is " + x); }
 }
 class Q25Sub extends Q25Base {
   Q25Sub(int x) { System.out.println("in constructor, x is " + x); }
   public static void go() { new Q25Sub(1); }
 }
Given a call to go(), what is the result?
A) in constructor, x is 1
   x is 99
B) x is 99
   in constructor, x is 1
C) x is 99
   in constructor, x is 99
D) Compilation fails

Q) Given:
 class Q25Base {
   int x = 99;
   { System.out.println("x is " + x); }
   Q25Base(int x) {}
 }
 class Q25Sub extends Q25Base {
   int y = 99;
   Q25Sub(int x) { System.out.println("in constructor, x is " + x); }
   public static void go() { new Q25Sub(1); }
 }
Given a call to go(), what is the result?
A) in constructor, x is 1
   x is 99
B) x is 99
   in constructor, x is 1
C) x is 99
   in constructor, x is 99
D) Compilation fails

Q) Given:
 class Q25Base {
   int x = 99; { System.out.println("x is " + x); }
   Q25Base() {} Q25Base(int x) {}
 }
 class Q25Sub extends Q25Base {
   int y = 99;
   Q25Sub(int x) { super(y+1);
    System.out.println("in constructor, x is " + x); }
 }
Given a call to new Q25Sub(1), what is the result?
A) in constructor, x is 1
   x is 99
B) x is 99
   in constructor, x is 1
C) x is 99
   in constructor, x is 99
D) Compilation fails

Q) Given:
class Parent {
  Parent(int x) {
   // reminder! implicitly:
   // super();
   // instance initilizers
   y += x; out.print(", P-c: y is " + y); }
  static { out.print(", P-si: x is " + Parent.x); }
  static int x = 99;
  int y = 100;
  { y++; out.print(", P-i: y is " + y); }
}
class Child extends Parent {
  int x = 200;
  static int y = 300;
  Child() { super(y); }
  Child(int x) { this(); }
  { out.print(", C-i x: is " + x); }
  static { out.print(", C-si: y is " + y); }
}
class InitOrder3 {
  public static void main(String[] args) {
    out.print("Hello!");
    new Child(-1);
    out.println(" Goodbye!");
  }
}
What is the result?
A) Compilation fails
B) Exception at runtime
C) Hello!, P-si: x is 0, C-si: y is 300, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
D) , P-si: x is 0, C-si: y is 300Hello!, P-i: y is 101, P-c: y is 401, C-i x: is 200 Goodbye!
E) Hello!, P-si: x is 99, C-si: y is 300, P-i: y is 101, P-c: y is 100Goodbye!

Q) Given:
 interface StudentCriterion {
   boolean test(Student s);
 }
and:
class Student {
   public int getGpa() { return 0; }
   public List<String> getCourses() { return null; }
 }
Which are legal (individually):
A) StudentCriterion sc = Student s -> { return s.getGpa() > 3;};
B) StudentCriterion sc = s -> { s.getGpa() > 3 };
C) Object sc = s -> {return s.getGpa() > 3;};
D) StudentCriterion sc = (s) -> s.getGpa() > 3;
E) StudentCriterion sc = s -> s.getCourses().size();

Q) Which are correct declarations?
interface Comparator<E> {
  int compare(E e1, E e2);
}
A) Comparator<String> cs = s1, s2 -> s2.compareTo(s1);
B) Comparator<String> cs = (s1, s2) -> s2.compareTo(s1);
C) Comparator<String> cs = (var s1, String s2) -> s2.compareTo(s1);
D) Comparator<String> cs = (var s1, s2) -> s2.compareTo(s1);
E) Comparator<String> cs = (String s1, String s2) -> s2.compareTo(s1);

Q) Which are legal individually:
A) Function<String, String> fss = s -> { System.out.println(s); };
B) Consumer<String> cs = s -> { System.out.println(s); };
C) Supplier<String> ss = (s1, s2) -> s1 + s2;
D) BiPredicate<String> bps = (String s) -> { return s.length() > 0; };
E) ToIntFunction<String> tofs = s -> s.length();

Q)  Given:
     ???? (s, t) -> s.length() - t.length();

Which are correct inserted in place of ????
A) BiFunction<String, String, Integer> f =
B) BiPredicate<String> f =
C) Comparator<String> f =
D) Supplier<String, Integer> f =
E) BinaryOperator<String> f =

Q) Given:
StringBuilder sb1 = new StringBuilder("Hello");
StringBuilder sb2 = sb1;
sb1 = null;
// line n1

Which is true at line n1?
A) sb1 is unreferenced and eligible for GC
B) sb1 and sb2 are unreferenced and eligible for GC
C) No objects are eligible for GC

Q) Given:

StringBuilder sb1 = new StringBuilder("Hello");
StringBuilder sb2 = new StringBuilder("World");
sb1 = null;
sb2 = sb1;
// line n1

Which is true at line n1?
A) Object containing "Hello" is unreferenced and eligible for GC
B) Object containing "World" is unreferenced and eligible for GC
C) No objects are eligible for GC

Q) Given:
 String doStuff(String s) {
   s = new String("Hello");
   return new String(s);
 }
and:
 public static void main(String[] args) {
   String y = doStuff("Hello");
   // line n1
 }
how many String objects are eligible for GC at line n1
A) 0
B) 1
C) 2
D) 3

Q) Given:
@interface MyAnnot {
// line n1
}

Which can be added at line n1?
A) public String name();
B) LocalDate date();
C) int count() = 10;
D) Retention ret();
E) protected String value();

Q) What does a module-info identify in an export directive?
A) classes
B) interfaces
C) a service
D) a package
E) methods

Q) What does a module-info identify in a requires directive?
A) classes
B) interfaces
C) a service
D) a package
E) a module

Q) Given:
module first {
   exports my.stuff;
}
Which would allow module second to use class my.stuff.Banana
A) module second { requires my.stuff; }
B) module second { requires Banana; }
C) module second { uses my.stuff.Banana; }
D) module second { requires first; }
E) module second { opens first; }